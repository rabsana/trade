<?php

namespace Rabsana\Trade\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Http\Request;
use Rabsana\Trade\Helpers\Math;
use Rabsana\Trade\Models\Symbol;

class GenerateOrdersRandomlyCommand extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'order:generate {number=100}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = "This command generate some orders in randomly way";



    public function handle()
    {
        // check the app environment
        if (env('APP_ENV', 'local') == 'production') {
            $this->warn('Generating orders randomly is not available at the production mode');
            return;
        }

        // start the progress bar
        $this->output->progressStart($this->argument('number'));

        // get user token
        $token = '';
        $userClass = config('auth.providers.' . config('auth.guards.api.provider'))['model'];
        if ($user = $userClass::first()) {
            if (config('auth.guards.api.driver') == 'passport') {
                $token = $user->createToken('user')->accessToken;
            } elseif (config('auth.guards.api.driver') == 'token') {
                $token = $user->api_token;
            }
        }

        // get all symbols
        $symbols = Symbol::get();

        $successNumbers = 0;
        $errorNumbers = 0;

        for ($i = 1; $i <= $this->argument('number'); $i++) {

            // get a symbol randomly
            $symbol = collect(collect($symbols)->shuffle()->all())->first();
            $base_qty = round(Math::number((float)Math::add((float)rand(1, 5), (float)lcg_value()), 2), 1);
            $price = round(Math::number((float)Math::add((float)rand(10, 20), (float)lcg_value()), 2), 1);

            $req = Request::create(
                route("rabsana-trade.api.v1.orders.store"),
                'POST',
                [
                    'symbol'            => $symbol->pair,
                    'side'              => (rand(0, 1)) ? 'BUY' : 'SELL',
                    'type'              => 'LIMIT',
                    'base_qty'          => $base_qty,
                    'price'             => $price,
                    'user_description'  => 'generated by command'
                ],
            );
            // set the headers
            $req->headers->set('Authorization', "Bearer $token");
            $req->headers->set('Accept', 'Bearer application/json');

            $res = app()->handle($req);
            $responseBody = $res->getContent();


            if ($res->getStatusCode() == 200) {

                $this->info(" The order #{$i} generated successfully");
                $successNumbers++;

                // 
            } else {
                $this->error(" Generating order number #{$i} has problem");
                $errorNumbers++;

                // 
            }


            $this->output->progressAdvance();

            // sleep one second after 3 request
            sleep(3);
        }

        $this->output->progressFinish();

        $this->info($successNumbers . " number of orders generated successfully ");
        $this->error($errorNumbers . " number of orders had problem ");
    }
}
